### Arcade Classics Collection


import tkinter as tk
import random
from tkinter import messagebox

# Function to get a random word for Hangman
def get_random_word():
    words = ["example", "mystery", "python", "hangman", "challenge", "programming"]
    return random.choice(words)

# Hangman Game Class
class HangmanGame:
    def __init__(self, master):
        self.master = master
        self.master.title("Hangman Game")
        self.initialize_game()

    def initialize_game(self):
        # Remove all widgets for game restart
        for widget in self.master.winfo_children():
            widget.destroy()

        self.word = get_random_word()
        self.guessed = ["_"] * len(self.word)
        self.attempts = 6
        self.guessed_letters = []

        self.canvas = tk.Canvas(self.master, width=400, height=300)
        self.canvas.pack()

        self.label = tk.Label(self.master, text="Guess the word: " + " ".join(self.guessed), font=('Helvetica', 18))
        self.label.pack()

        self.user_input = tk.StringVar()
        self.entry = tk.Entry(self.master, textvariable=self.user_input)
        self.entry.pack()
        self.entry.focus_set()
        self.entry.bind("<Return>", self.guess_letter)

        self.update_canvas()

    def update_canvas(self):
        self.canvas.delete("all")
        self.draw_hangman()

    def draw_hangman(self):
        self.canvas.create_line(100, 280, 100, 50, width=2)  # The scaffold
        self.canvas.create_line(100, 50, 200, 50, width=2)
        self.canvas.create_line(200, 50, 200, 70, width=2)

        # Draw the hangman based on attempts left
        # Starting from 6 attempts going down to 1.
        # The hangman parts to be drawn in order of missed attempts.
        if self.attempts <= 5:
            self.canvas.create_oval(180, 70, 220, 110, width=2)  # Head
        if self.attempts <= 4:
            self.canvas.create_line(200, 110, 200, 180, width=2)  # Body
        if self.attempts <= 3:
            self.canvas.create_line(200, 120, 160, 150, width=2)  # Left arm
        if self.attempts <= 2:
            self.canvas.create_line(200, 120, 240, 150, width=2)  # Right arm
        if self.attempts <= 1:
            self.canvas.create_line(200, 180, 160, 230, width=2)  # Left leg
        if self.attempts == 0:
            self.canvas.create_line(200, 180, 240, 230, width=2)  # Right leg


    def guess_letter(self, event):
        guess = self.user_input.get().strip().lower()
        self.user_input.set('')
        if not guess or len(guess) > 1 or not guess.isalpha() or guess in self.guessed_letters:
            return
        if guess in self.word:
            indices = [i for i, x in enumerate(self.word) if x == guess]
            for index in indices:
                self.guessed[index] = guess
            self.label.config(text="Guess the word: " + " ".join(self.guessed))
            if "_" not in self.guessed:
                messagebox.showinfo("Hangman", "Congratulations! You won!")
                self.game_over_dialog()
        else:
            self.attempts -= 1
            self.update_canvas()
            if self.attempts == 0:
                self.game_over_dialog()

    def game_over_dialog(self):
        message = "Congratulations! You won!" if "_" not in self.guessed else f"Game over! The word was: {self.word}"
        response = messagebox.askquestion("Hangman", message + " Play again?")
        if response == 'yes':
            self.initialize_game()
        else:
            self.master.destroy()

# Function to launch the Hangman game
def launch_hangman():
    new_window = tk.Toplevel()
    HangmanGame(new_window)

# Main function to create the arcade hub
def main():
    root = tk.Tk()
    root.title("Mini Arcade Hub")

    # Create a frame to hold the grid of buttons
    frame = tk.Frame(root)
    frame.pack(padx=10, pady=10)

    # Define the games and their corresponding buttons
    games = {
        "Hangman": launch_hangman,
        "Snake": lambda: messagebox.showinfo("Placeholder", "Snake Game Placeholder"),
        "Memory": lambda: messagebox.showinfo("Placeholder", "Memory Game Placeholder"),
        "Minesweeper": lambda: messagebox.showinfo("Placeholder", "Minesweeper Game Placeholder")
    }

    # Create and place buttons for each game
    row = col = 0
    for game_name, command in games.items():
        button = tk.Button(frame, text=game_name, command=command, height=3, width=10)
        button.grid(row=row, column=col, padx=5, pady=5)
        col += 1
        if col > 1:
            col = 0
            row += 1

    root.mainloop()

if __name__ == "__main__":
    main()
